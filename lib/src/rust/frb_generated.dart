// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api.dart';
import 'api/accounts.dart';
import 'api/contacts.dart';
import 'api/groups.dart';
import 'api/messages.dart';
import 'api/relays.dart';
import 'api/utils.dart';
import 'api/wallet.dart';
import 'api/welcomes.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1742202046;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_whitenoise',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiWalletCdkWalletAddMint({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
  });

  Future<bool> crateApiWalletCdkWalletCheckMintQuoteStatus({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required String quoteId,
  });

  Future<BigInt> crateApiWalletCdkWalletGetBalance({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
  });

  Future<String> crateApiWalletCdkWalletMintTokens({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required String quoteId,
  });

  Future<CdkWallet> crateApiWalletCdkWalletNew();

  Future<String> crateApiWalletCdkWalletRequestMintQuote({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required BigInt amountSats,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetAbout({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetBanner({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetDisplayName({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetLud06({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetLud16({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetName({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetNip05({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetPicture({
    required MetadataData that,
  });

  String? crateApiUtilsMetadataDataAutoAccessorGetWebsite({
    required MetadataData that,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetAbout({
    required MetadataData that,
    String? about,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetBanner({
    required MetadataData that,
    String? banner,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetDisplayName({
    required MetadataData that,
    String? displayName,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetLud06({
    required MetadataData that,
    String? lud06,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetLud16({
    required MetadataData that,
    String? lud16,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetName({
    required MetadataData that,
    String? name,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetNip05({
    required MetadataData that,
    String? nip05,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetPicture({
    required MetadataData that,
    String? picture,
  });

  void crateApiUtilsMetadataDataAutoAccessorSetWebsite({
    required MetadataData that,
    String? website,
  });

  Future<Map<String, String>> crateApiUtilsMetadataDataGetCustom({
    required MetadataData that,
  });

  Future<void> crateApiUtilsMetadataDataSetCustom({
    required MetadataData that,
    required Map<String, String> customMap,
  });

  Future<void> crateApiWelcomesAcceptWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  });

  Future<void> crateApiContactsAddContact({
    required PublicKey pubkey,
    required PublicKey contactPubkey,
  });

  Future<void> crateApiGroupsAddMembersToGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required List<PublicKey> memberPubkeys,
  });

  Future<AccountData> crateApiAccountsConvertAccountToData({
    required Account account,
  });

  Future<ChatMessageData> crateApiMessagesConvertChatMessageToData({
    required ChatMessage chatMessage,
  });

  Future<WhitenoiseConfigData> crateApiUtilsConvertConfigToData({
    required WhitenoiseConfig config,
  });

  Future<GroupData> crateApiGroupsConvertGroupToData({required Group group});

  Future<MessageWithTokensData> crateApiMessagesConvertMessageWithTokensToData({
    required MessageWithTokens messageWithTokens,
  });

  Future<Metadata> crateApiUtilsConvertMetadataDataToMetadata({
    required MetadataData metadataData,
  });

  Future<MetadataData> crateApiUtilsConvertMetadataToData({
    required Metadata metadata,
  });

  Future<WelcomeData> crateApiWelcomesConvertWelcomeToData({
    required Welcome welcome,
  });

  Future<GroupData> crateApiGroupsCreateGroup({
    required PublicKey creatorPubkey,
    required List<PublicKey> memberPubkeys,
    required List<PublicKey> adminPubkeys,
    required String groupName,
    required String groupDescription,
  });

  Future<Account> crateApiAccountsCreateIdentity();

  Future<WhitenoiseConfig> crateApiUtilsCreateWhitenoiseConfig({
    required String dataDir,
    required String logsDir,
  });

  Future<void> crateApiWelcomesDeclineWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  });

  Future<void> crateApiDeleteAllData();

  Future<String> crateApiAccountsExportAccountNpub({required PublicKey pubkey});

  Future<String> crateApiAccountsExportAccountNsec({required PublicKey pubkey});

  Future<AccountData> crateApiAccountsFetchAccount({required PublicKey pubkey});

  Future<List<AccountData>> crateApiAccountsFetchAccounts();

  Future<List<ChatMessageData>>
  crateApiMessagesFetchAggregatedMessagesForGroup({
    required PublicKey pubkey,
    required GroupId groupId,
  });

  Future<Map<PublicKey, MetadataData?>> crateApiContactsFetchContacts({
    required PublicKey pubkey,
  });

  Future<List<PublicKey>> crateApiGroupsFetchGroupAdmins({
    required PublicKey pubkey,
    required GroupId groupId,
  });

  Future<List<PublicKey>> crateApiGroupsFetchGroupMembers({
    required PublicKey pubkey,
    required GroupId groupId,
  });

  Future<List<GroupData>> crateApiGroupsFetchGroups({
    required PublicKey pubkey,
  });

  Future<Event?> crateApiRelaysFetchKeyPackage({required PublicKey pubkey});

  Future<List<MessageWithTokensData>> crateApiMessagesFetchMessagesForGroup({
    required PublicKey pubkey,
    required GroupId groupId,
  });

  Future<MetadataData?> crateApiAccountsFetchMetadata({
    required PublicKey pubkey,
  });

  Future<OnboardingState> crateApiAccountsFetchOnboardingState({
    required PublicKey pubkey,
  });

  Future<List<(String, String)>> crateApiRelaysFetchRelayStatus({
    required PublicKey pubkey,
  });

  Future<List<RelayUrl>> crateApiRelaysFetchRelays({
    required PublicKey pubkey,
    required RelayType relayType,
  });

  Future<WelcomeData> crateApiWelcomesFetchWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  });

  Future<List<WelcomeData>> crateApiWelcomesFetchWelcomes({
    required PublicKey pubkey,
  });

  Future<String> crateApiUtilsGetDefaultBlossomServerUrl();

  Future<GroupId> crateApiGroupsGroupIdFromString({required String hexString});

  Future<String> crateApiGroupsGroupIdToString({required GroupId groupId});

  Future<String> crateApiUtilsHexPubkeyFromNpub({required String npub});

  Future<String> crateApiUtilsHexPubkeyFromPublicKey({
    required PublicKey publicKey,
  });

  Future<ImageType> crateApiUtilsImageTypeFromExtension({
    required String extension_,
  });

  Future<ImageType> crateApiUtilsImageTypeGif();

  Future<ImageType> crateApiUtilsImageTypeJpeg();

  Future<ImageType> crateApiUtilsImageTypeJpg();

  Future<ImageType> crateApiUtilsImageTypePng();

  Future<ImageType> crateApiUtilsImageTypeWebp();

  Future<void> crateApiInitializeWhitenoise({required WhitenoiseConfig config});

  Future<Account> crateApiAccountsLogin({required String nsecOrHexPrivkey});

  Future<void> crateApiAccountsLogout({required PublicKey pubkey});

  Future<String> crateApiUtilsNpubFromHexPubkey({required String hexPubkey});

  Future<String> crateApiUtilsNpubFromPublicKey({required PublicKey publicKey});

  Future<PublicKey> crateApiUtilsPublicKeyFromString({
    required String publicKeyString,
  });

  Future<Map<PublicKey, MetadataData?>> crateApiContactsQueryContacts({
    required PublicKey pubkey,
  });

  Future<RelayType> crateApiRelaysRelayTypeInbox();

  Future<RelayType> crateApiRelaysRelayTypeKeyPackage();

  Future<RelayType> crateApiRelaysRelayTypeNostr();

  Future<RelayUrl> crateApiUtilsRelayUrlFromString({required String url});

  Future<void> crateApiContactsRemoveContact({
    required PublicKey pubkey,
    required PublicKey contactPubkey,
  });

  Future<void> crateApiGroupsRemoveMembersFromGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required List<PublicKey> memberPubkeys,
  });

  Future<void> crateApiMessagesSendDirectMessageNip04({
    required PublicKey sender,
    required PublicKey receiver,
    required String content,
    required List<Tag> tags,
  });

  Future<MessageWithTokensData> crateApiMessagesSendMessageToGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required String message,
    required int kind,
    List<Tag>? tags,
  });

  Future<String> crateApiUtilsStringFromRelayUrl({required RelayUrl relayUrl});

  Future<Tag> crateApiUtilsTagFromVec({required List<String> vec});

  Future<void> crateApiContactsUpdateContacts({
    required PublicKey pubkey,
    required List<PublicKey> contactPubkeys,
  });

  Future<void> crateApiAccountsUpdateMetadata({
    required MetadataData metadata,
    required PublicKey pubkey,
  });

  Future<void> crateApiRelaysUpdateRelays({
    required PublicKey pubkey,
    required RelayType relayType,
    required List<RelayUrl> relays,
  });

  Future<String> crateApiAccountsUploadProfilePicture({
    required PublicKey pubkey,
    required String serverUrl,
    required String filePath,
    required ImageType imageType,
  });

  Future<String> crateApiUtilsWhitenoiseErrorToString({
    required WhitenoiseError error,
  });

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Account;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Account;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AccountPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CdkWallet;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CdkWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CdkWalletPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ChatMessage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ChatMessage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChatMessagePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Group;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Group;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GroupId;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GroupId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageType;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ImageTypePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MessageWithTokens;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MessageWithTokens;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MessageWithTokensPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Metadata;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Metadata;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MetadataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MetadataData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MetadataData;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MetadataDataPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PublicKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayType;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayTypePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayUrl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayUrlPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tag;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tag;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TagPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Welcome;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Welcome;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WelcomePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WhitenoiseConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WhitenoiseConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_WhitenoiseConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WhitenoiseError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WhitenoiseError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_WhitenoiseErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiWalletCdkWalletAddMint({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
            that,
            serializer,
          );
          sse_encode_String(workDir, serializer);
          sse_encode_String(mintUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWalletCdkWalletAddMintConstMeta,
        argValues: [that, workDir, mintUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletAddMintConstMeta =>
      const TaskConstMeta(
        debugName: 'CdkWallet_add_mint',
        argNames: ['that', 'workDir', 'mintUrl'],
      );

  @override
  Future<bool> crateApiWalletCdkWalletCheckMintQuoteStatus({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required String quoteId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
            that,
            serializer,
          );
          sse_encode_String(workDir, serializer);
          sse_encode_String(mintUrl, serializer);
          sse_encode_String(quoteId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWalletCdkWalletCheckMintQuoteStatusConstMeta,
        argValues: [that, workDir, mintUrl, quoteId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletCheckMintQuoteStatusConstMeta =>
      const TaskConstMeta(
        debugName: 'CdkWallet_check_mint_quote_status',
        argNames: ['that', 'workDir', 'mintUrl', 'quoteId'],
      );

  @override
  Future<BigInt> crateApiWalletCdkWalletGetBalance({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
            that,
            serializer,
          );
          sse_encode_String(workDir, serializer);
          sse_encode_String(mintUrl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWalletCdkWalletGetBalanceConstMeta,
        argValues: [that, workDir, mintUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletGetBalanceConstMeta =>
      const TaskConstMeta(
        debugName: 'CdkWallet_get_balance',
        argNames: ['that', 'workDir', 'mintUrl'],
      );

  @override
  Future<String> crateApiWalletCdkWalletMintTokens({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required String quoteId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
            that,
            serializer,
          );
          sse_encode_String(workDir, serializer);
          sse_encode_String(mintUrl, serializer);
          sse_encode_String(quoteId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWalletCdkWalletMintTokensConstMeta,
        argValues: [that, workDir, mintUrl, quoteId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletMintTokensConstMeta =>
      const TaskConstMeta(
        debugName: 'CdkWallet_mint_tokens',
        argNames: ['that', 'workDir', 'mintUrl', 'quoteId'],
      );

  @override
  Future<CdkWallet> crateApiWalletCdkWalletNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWalletCdkWalletNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletNewConstMeta =>
      const TaskConstMeta(debugName: 'CdkWallet_new', argNames: []);

  @override
  Future<String> crateApiWalletCdkWalletRequestMintQuote({
    required CdkWallet that,
    required String workDir,
    required String mintUrl,
    required BigInt amountSats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
            that,
            serializer,
          );
          sse_encode_String(workDir, serializer);
          sse_encode_String(mintUrl, serializer);
          sse_encode_u_64(amountSats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWalletCdkWalletRequestMintQuoteConstMeta,
        argValues: [that, workDir, mintUrl, amountSats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWalletCdkWalletRequestMintQuoteConstMeta =>
      const TaskConstMeta(
        debugName: 'CdkWallet_request_mint_quote',
        argNames: ['that', 'workDir', 'mintUrl', 'amountSats'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetAbout({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetAboutConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetAboutConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_about',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetBanner({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetBannerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetBannerConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_banner',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetDisplayName({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiUtilsMetadataDataAutoAccessorGetDisplayNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiUtilsMetadataDataAutoAccessorGetDisplayNameConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_display_name',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetLud06({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetLud06ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetLud06ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_lud06',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetLud16({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetLud16ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetLud16ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_lud16',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetName({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetNameConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_name',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetNip05({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetNip05ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetNip05ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_nip05',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetPicture({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetPictureConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetPictureConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_picture',
        argNames: ['that'],
      );

  @override
  String? crateApiUtilsMetadataDataAutoAccessorGetWebsite({
    required MetadataData that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorGetWebsiteConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorGetWebsiteConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_get_website',
        argNames: ['that'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetAbout({
    required MetadataData that,
    String? about,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(about, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetAboutConstMeta,
        argValues: [that, about],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetAboutConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_about',
        argNames: ['that', 'about'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetBanner({
    required MetadataData that,
    String? banner,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(banner, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetBannerConstMeta,
        argValues: [that, banner],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetBannerConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_banner',
        argNames: ['that', 'banner'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetDisplayName({
    required MetadataData that,
    String? displayName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(displayName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiUtilsMetadataDataAutoAccessorSetDisplayNameConstMeta,
        argValues: [that, displayName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiUtilsMetadataDataAutoAccessorSetDisplayNameConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_display_name',
        argNames: ['that', 'displayName'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetLud06({
    required MetadataData that,
    String? lud06,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(lud06, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetLud06ConstMeta,
        argValues: [that, lud06],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetLud06ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_lud06',
        argNames: ['that', 'lud06'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetLud16({
    required MetadataData that,
    String? lud16,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(lud16, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetLud16ConstMeta,
        argValues: [that, lud16],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetLud16ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_lud16',
        argNames: ['that', 'lud16'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetName({
    required MetadataData that,
    String? name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetNameConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetNameConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_name',
        argNames: ['that', 'name'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetNip05({
    required MetadataData that,
    String? nip05,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(nip05, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetNip05ConstMeta,
        argValues: [that, nip05],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetNip05ConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_nip05',
        argNames: ['that', 'nip05'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetPicture({
    required MetadataData that,
    String? picture,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(picture, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetPictureConstMeta,
        argValues: [that, picture],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetPictureConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_picture',
        argNames: ['that', 'picture'],
      );

  @override
  void crateApiUtilsMetadataDataAutoAccessorSetWebsite({
    required MetadataData that,
    String? website,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_opt_String(website, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataAutoAccessorSetWebsiteConstMeta,
        argValues: [that, website],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataAutoAccessorSetWebsiteConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_auto_accessor_set_website',
        argNames: ['that', 'website'],
      );

  @override
  Future<Map<String, String>> crateApiUtilsMetadataDataGetCustom({
    required MetadataData that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Map_String_String_None,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataGetCustomConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataGetCustomConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_get_custom',
        argNames: ['that'],
      );

  @override
  Future<void> crateApiUtilsMetadataDataSetCustom({
    required MetadataData that,
    required Map<String, String> customMap,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            that,
            serializer,
          );
          sse_encode_Map_String_String_None(customMap, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsMetadataDataSetCustomConstMeta,
        argValues: [that, customMap],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsMetadataDataSetCustomConstMeta =>
      const TaskConstMeta(
        debugName: 'MetadataData_set_custom',
        argNames: ['that', 'customMap'],
      );

  @override
  Future<void> crateApiWelcomesAcceptWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiWelcomesAcceptWelcomeConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesAcceptWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: 'accept_welcome',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<void> crateApiContactsAddContact({
    required PublicKey pubkey,
    required PublicKey contactPubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            contactPubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiContactsAddContactConstMeta,
        argValues: [pubkey, contactPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsAddContactConstMeta => const TaskConstMeta(
    debugName: 'add_contact',
    argNames: ['pubkey', 'contactPubkey'],
  );

  @override
  Future<void> crateApiGroupsAddMembersToGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required List<PublicKey> memberPubkeys,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            memberPubkeys,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsAddMembersToGroupConstMeta,
        argValues: [pubkey, groupId, memberPubkeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsAddMembersToGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'add_members_to_group',
        argNames: ['pubkey', 'groupId', 'memberPubkeys'],
      );

  @override
  Future<AccountData> crateApiAccountsConvertAccountToData({
    required Account account,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
            account,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_account_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAccountsConvertAccountToDataConstMeta,
        argValues: [account],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsConvertAccountToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_account_to_data',
        argNames: ['account'],
      );

  @override
  Future<ChatMessageData> crateApiMessagesConvertChatMessageToData({
    required ChatMessage chatMessage,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
            chatMessage,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_chat_message_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMessagesConvertChatMessageToDataConstMeta,
        argValues: [chatMessage],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesConvertChatMessageToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_chat_message_to_data',
        argNames: ['chatMessage'],
      );

  @override
  Future<WhitenoiseConfigData> crateApiUtilsConvertConfigToData({
    required WhitenoiseConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
            config,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_whitenoise_config_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsConvertConfigToDataConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsConvertConfigToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_config_to_data',
        argNames: ['config'],
      );

  @override
  Future<GroupData> crateApiGroupsConvertGroupToData({required Group group}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
            group,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_group_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsConvertGroupToDataConstMeta,
        argValues: [group],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsConvertGroupToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_group_to_data',
        argNames: ['group'],
      );

  @override
  Future<MessageWithTokensData> crateApiMessagesConvertMessageWithTokensToData({
    required MessageWithTokens messageWithTokens,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
            messageWithTokens,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_message_with_tokens_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMessagesConvertMessageWithTokensToDataConstMeta,
        argValues: [messageWithTokens],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesConvertMessageWithTokensToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_message_with_tokens_to_data',
        argNames: ['messageWithTokens'],
      );

  @override
  Future<Metadata> crateApiUtilsConvertMetadataDataToMetadata({
    required MetadataData metadataData,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            metadataData,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsConvertMetadataDataToMetadataConstMeta,
        argValues: [metadataData],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsConvertMetadataDataToMetadataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_metadata_data_to_metadata',
        argNames: ['metadataData'],
      );

  @override
  Future<MetadataData> crateApiUtilsConvertMetadataToData({
    required Metadata metadata,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
            metadata,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsConvertMetadataToDataConstMeta,
        argValues: [metadata],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsConvertMetadataToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_metadata_to_data',
        argNames: ['metadata'],
      );

  @override
  Future<WelcomeData> crateApiWelcomesConvertWelcomeToData({
    required Welcome welcome,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
            welcome,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_welcome_data,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWelcomesConvertWelcomeToDataConstMeta,
        argValues: [welcome],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesConvertWelcomeToDataConstMeta =>
      const TaskConstMeta(
        debugName: 'convert_welcome_to_data',
        argNames: ['welcome'],
      );

  @override
  Future<GroupData> crateApiGroupsCreateGroup({
    required PublicKey creatorPubkey,
    required List<PublicKey> memberPubkeys,
    required List<PublicKey> adminPubkeys,
    required String groupName,
    required String groupDescription,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            creatorPubkey,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            memberPubkeys,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            adminPubkeys,
            serializer,
          );
          sse_encode_String(groupName, serializer);
          sse_encode_String(groupDescription, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_group_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsCreateGroupConstMeta,
        argValues: [
          creatorPubkey,
          memberPubkeys,
          adminPubkeys,
          groupName,
          groupDescription,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsCreateGroupConstMeta => const TaskConstMeta(
    debugName: 'create_group',
    argNames: [
      'creatorPubkey',
      'memberPubkeys',
      'adminPubkeys',
      'groupName',
      'groupDescription',
    ],
  );

  @override
  Future<Account> crateApiAccountsCreateIdentity() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsCreateIdentityConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsCreateIdentityConstMeta =>
      const TaskConstMeta(debugName: 'create_identity', argNames: []);

  @override
  Future<WhitenoiseConfig> crateApiUtilsCreateWhitenoiseConfig({
    required String dataDir,
    required String logsDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dataDir, serializer);
          sse_encode_String(logsDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsCreateWhitenoiseConfigConstMeta,
        argValues: [dataDir, logsDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsCreateWhitenoiseConfigConstMeta =>
      const TaskConstMeta(
        debugName: 'create_whitenoise_config',
        argNames: ['dataDir', 'logsDir'],
      );

  @override
  Future<void> crateApiWelcomesDeclineWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiWelcomesDeclineWelcomeConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesDeclineWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: 'decline_welcome',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<void> crateApiDeleteAllData() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiDeleteAllDataConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDeleteAllDataConstMeta =>
      const TaskConstMeta(debugName: 'delete_all_data', argNames: []);

  @override
  Future<String> crateApiAccountsExportAccountNpub({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsExportAccountNpubConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsExportAccountNpubConstMeta =>
      const TaskConstMeta(
        debugName: 'export_account_npub',
        argNames: ['pubkey'],
      );

  @override
  Future<String> crateApiAccountsExportAccountNsec({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsExportAccountNsecConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsExportAccountNsecConstMeta =>
      const TaskConstMeta(
        debugName: 'export_account_nsec',
        argNames: ['pubkey'],
      );

  @override
  Future<AccountData> crateApiAccountsFetchAccount({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_account_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsFetchAccountConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsFetchAccountConstMeta =>
      const TaskConstMeta(debugName: 'fetch_account', argNames: ['pubkey']);

  @override
  Future<List<AccountData>> crateApiAccountsFetchAccounts() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_account_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsFetchAccountsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsFetchAccountsConstMeta =>
      const TaskConstMeta(debugName: 'fetch_accounts', argNames: []);

  @override
  Future<List<ChatMessageData>>
  crateApiMessagesFetchAggregatedMessagesForGroup({
    required PublicKey pubkey,
    required GroupId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_chat_message_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiMessagesFetchAggregatedMessagesForGroupConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesFetchAggregatedMessagesForGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_aggregated_messages_for_group',
        argNames: ['pubkey', 'groupId'],
      );

  @override
  Future<Map<PublicKey, MetadataData?>> crateApiContactsFetchContacts({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData_None,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiContactsFetchContactsConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsFetchContactsConstMeta =>
      const TaskConstMeta(debugName: 'fetch_contacts', argNames: ['pubkey']);

  @override
  Future<List<PublicKey>> crateApiGroupsFetchGroupAdmins({
    required PublicKey pubkey,
    required GroupId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsFetchGroupAdminsConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsFetchGroupAdminsConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_group_admins',
        argNames: ['pubkey', 'groupId'],
      );

  @override
  Future<List<PublicKey>> crateApiGroupsFetchGroupMembers({
    required PublicKey pubkey,
    required GroupId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsFetchGroupMembersConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsFetchGroupMembersConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_group_members',
        argNames: ['pubkey', 'groupId'],
      );

  @override
  Future<List<GroupData>> crateApiGroupsFetchGroups({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_group_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsFetchGroupsConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsFetchGroupsConstMeta =>
      const TaskConstMeta(debugName: 'fetch_groups', argNames: ['pubkey']);

  @override
  Future<Event?> crateApiRelaysFetchKeyPackage({required PublicKey pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 52,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiRelaysFetchKeyPackageConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysFetchKeyPackageConstMeta =>
      const TaskConstMeta(debugName: 'fetch_key_package', argNames: ['pubkey']);

  @override
  Future<List<MessageWithTokensData>> crateApiMessagesFetchMessagesForGroup({
    required PublicKey pubkey,
    required GroupId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 53,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_message_with_tokens_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiMessagesFetchMessagesForGroupConstMeta,
        argValues: [pubkey, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesFetchMessagesForGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_messages_for_group',
        argNames: ['pubkey', 'groupId'],
      );

  @override
  Future<MetadataData?> crateApiAccountsFetchMetadata({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 54,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsFetchMetadataConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsFetchMetadataConstMeta =>
      const TaskConstMeta(debugName: 'fetch_metadata', argNames: ['pubkey']);

  @override
  Future<OnboardingState> crateApiAccountsFetchOnboardingState({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 55,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_onboarding_state,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsFetchOnboardingStateConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsFetchOnboardingStateConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_onboarding_state',
        argNames: ['pubkey'],
      );

  @override
  Future<List<(String, String)>> crateApiRelaysFetchRelayStatus({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 56,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_record_string_string,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiRelaysFetchRelayStatusConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysFetchRelayStatusConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_relay_status',
        argNames: ['pubkey'],
      );

  @override
  Future<List<RelayUrl>> crateApiRelaysFetchRelays({
    required PublicKey pubkey,
    required RelayType relayType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 57,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiRelaysFetchRelaysConstMeta,
        argValues: [pubkey, relayType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysFetchRelaysConstMeta => const TaskConstMeta(
    debugName: 'fetch_relays',
    argNames: ['pubkey', 'relayType'],
  );

  @override
  Future<WelcomeData> crateApiWelcomesFetchWelcome({
    required PublicKey pubkey,
    required String welcomeEventId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_String(welcomeEventId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 58,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_welcome_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiWelcomesFetchWelcomeConstMeta,
        argValues: [pubkey, welcomeEventId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesFetchWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: 'fetch_welcome',
        argNames: ['pubkey', 'welcomeEventId'],
      );

  @override
  Future<List<WelcomeData>> crateApiWelcomesFetchWelcomes({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 59,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_welcome_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiWelcomesFetchWelcomesConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWelcomesFetchWelcomesConstMeta =>
      const TaskConstMeta(debugName: 'fetch_welcomes', argNames: ['pubkey']);

  @override
  Future<String> crateApiUtilsGetDefaultBlossomServerUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 60,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsGetDefaultBlossomServerUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsGetDefaultBlossomServerUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'get_default_blossom_server_url',
        argNames: [],
      );

  @override
  Future<GroupId> crateApiGroupsGroupIdFromString({required String hexString}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hexString, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 61,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsGroupIdFromStringConstMeta,
        argValues: [hexString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupIdFromStringConstMeta =>
      const TaskConstMeta(
        debugName: 'group_id_from_string',
        argNames: ['hexString'],
      );

  @override
  Future<String> crateApiGroupsGroupIdToString({required GroupId groupId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 62,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGroupsGroupIdToStringConstMeta,
        argValues: [groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsGroupIdToStringConstMeta =>
      const TaskConstMeta(
        debugName: 'group_id_to_string',
        argNames: ['groupId'],
      );

  @override
  Future<String> crateApiUtilsHexPubkeyFromNpub({required String npub}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(npub, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 63,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsHexPubkeyFromNpubConstMeta,
        argValues: [npub],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsHexPubkeyFromNpubConstMeta =>
      const TaskConstMeta(
        debugName: 'hex_pubkey_from_npub',
        argNames: ['npub'],
      );

  @override
  Future<String> crateApiUtilsHexPubkeyFromPublicKey({
    required PublicKey publicKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            publicKey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 64,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsHexPubkeyFromPublicKeyConstMeta,
        argValues: [publicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsHexPubkeyFromPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: 'hex_pubkey_from_public_key',
        argNames: ['publicKey'],
      );

  @override
  Future<ImageType> crateApiUtilsImageTypeFromExtension({
    required String extension_,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(extension_, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 65,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsImageTypeFromExtensionConstMeta,
        argValues: [extension_],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypeFromExtensionConstMeta =>
      const TaskConstMeta(
        debugName: 'image_type_from_extension',
        argNames: ['extension_'],
      );

  @override
  Future<ImageType> crateApiUtilsImageTypeGif() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 66,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsImageTypeGifConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypeGifConstMeta =>
      const TaskConstMeta(debugName: 'image_type_gif', argNames: []);

  @override
  Future<ImageType> crateApiUtilsImageTypeJpeg() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 67,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsImageTypeJpegConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypeJpegConstMeta =>
      const TaskConstMeta(debugName: 'image_type_jpeg', argNames: []);

  @override
  Future<ImageType> crateApiUtilsImageTypeJpg() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 68,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsImageTypeJpgConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypeJpgConstMeta =>
      const TaskConstMeta(debugName: 'image_type_jpg', argNames: []);

  @override
  Future<ImageType> crateApiUtilsImageTypePng() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 69,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsImageTypePngConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypePngConstMeta =>
      const TaskConstMeta(debugName: 'image_type_png', argNames: []);

  @override
  Future<ImageType> crateApiUtilsImageTypeWebp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 70,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsImageTypeWebpConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsImageTypeWebpConstMeta =>
      const TaskConstMeta(debugName: 'image_type_webp', argNames: []);

  @override
  Future<void> crateApiInitializeWhitenoise({
    required WhitenoiseConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
            config,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 71,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiInitializeWhitenoiseConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitializeWhitenoiseConstMeta =>
      const TaskConstMeta(
        debugName: 'initialize_whitenoise',
        argNames: ['config'],
      );

  @override
  Future<Account> crateApiAccountsLogin({required String nsecOrHexPrivkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(nsecOrHexPrivkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 72,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsLoginConstMeta,
        argValues: [nsecOrHexPrivkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsLoginConstMeta =>
      const TaskConstMeta(debugName: 'login', argNames: ['nsecOrHexPrivkey']);

  @override
  Future<void> crateApiAccountsLogout({required PublicKey pubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 73,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsLogoutConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsLogoutConstMeta =>
      const TaskConstMeta(debugName: 'logout', argNames: ['pubkey']);

  @override
  Future<String> crateApiUtilsNpubFromHexPubkey({required String hexPubkey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hexPubkey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 74,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsNpubFromHexPubkeyConstMeta,
        argValues: [hexPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsNpubFromHexPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: 'npub_from_hex_pubkey',
        argNames: ['hexPubkey'],
      );

  @override
  Future<String> crateApiUtilsNpubFromPublicKey({
    required PublicKey publicKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            publicKey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 75,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsNpubFromPublicKeyConstMeta,
        argValues: [publicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsNpubFromPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: 'npub_from_public_key',
        argNames: ['publicKey'],
      );

  @override
  Future<PublicKey> crateApiUtilsPublicKeyFromString({
    required String publicKeyString,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(publicKeyString, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 76,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsPublicKeyFromStringConstMeta,
        argValues: [publicKeyString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsPublicKeyFromStringConstMeta =>
      const TaskConstMeta(
        debugName: 'public_key_from_string',
        argNames: ['publicKeyString'],
      );

  @override
  Future<Map<PublicKey, MetadataData?>> crateApiContactsQueryContacts({
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 77,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData_None,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiContactsQueryContactsConstMeta,
        argValues: [pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsQueryContactsConstMeta =>
      const TaskConstMeta(debugName: 'query_contacts', argNames: ['pubkey']);

  @override
  Future<RelayType> crateApiRelaysRelayTypeInbox() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 78,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeInboxConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeInboxConstMeta =>
      const TaskConstMeta(debugName: 'relay_type_inbox', argNames: []);

  @override
  Future<RelayType> crateApiRelaysRelayTypeKeyPackage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 79,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeKeyPackageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeKeyPackageConstMeta =>
      const TaskConstMeta(debugName: 'relay_type_key_package', argNames: []);

  @override
  Future<RelayType> crateApiRelaysRelayTypeNostr() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 80,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRelaysRelayTypeNostrConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysRelayTypeNostrConstMeta =>
      const TaskConstMeta(debugName: 'relay_type_nostr', argNames: []);

  @override
  Future<RelayUrl> crateApiUtilsRelayUrlFromString({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 81,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsRelayUrlFromStringConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsRelayUrlFromStringConstMeta =>
      const TaskConstMeta(
        debugName: 'relay_url_from_string',
        argNames: ['url'],
      );

  @override
  Future<void> crateApiContactsRemoveContact({
    required PublicKey pubkey,
    required PublicKey contactPubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            contactPubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 82,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiContactsRemoveContactConstMeta,
        argValues: [pubkey, contactPubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsRemoveContactConstMeta =>
      const TaskConstMeta(
        debugName: 'remove_contact',
        argNames: ['pubkey', 'contactPubkey'],
      );

  @override
  Future<void> crateApiGroupsRemoveMembersFromGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required List<PublicKey> memberPubkeys,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            memberPubkeys,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 83,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiGroupsRemoveMembersFromGroupConstMeta,
        argValues: [pubkey, groupId, memberPubkeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGroupsRemoveMembersFromGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'remove_members_from_group',
        argNames: ['pubkey', 'groupId', 'memberPubkeys'],
      );

  @override
  Future<void> crateApiMessagesSendDirectMessageNip04({
    required PublicKey sender,
    required PublicKey receiver,
    required String content,
    required List<Tag> tags,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            sender,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            receiver,
            serializer,
          );
          sse_encode_String(content, serializer);
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
            tags,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 84,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiMessagesSendDirectMessageNip04ConstMeta,
        argValues: [sender, receiver, content, tags],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesSendDirectMessageNip04ConstMeta =>
      const TaskConstMeta(
        debugName: 'send_direct_message_nip04',
        argNames: ['sender', 'receiver', 'content', 'tags'],
      );

  @override
  Future<MessageWithTokensData> crateApiMessagesSendMessageToGroup({
    required PublicKey pubkey,
    required GroupId groupId,
    required String message,
    required int kind,
    List<Tag>? tags,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
            groupId,
            serializer,
          );
          sse_encode_String(message, serializer);
          sse_encode_u_16(kind, serializer);
          sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
            tags,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 85,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_message_with_tokens_data,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiMessagesSendMessageToGroupConstMeta,
        argValues: [pubkey, groupId, message, kind, tags],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMessagesSendMessageToGroupConstMeta =>
      const TaskConstMeta(
        debugName: 'send_message_to_group',
        argNames: ['pubkey', 'groupId', 'message', 'kind', 'tags'],
      );

  @override
  Future<String> crateApiUtilsStringFromRelayUrl({required RelayUrl relayUrl}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
            relayUrl,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 86,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsStringFromRelayUrlConstMeta,
        argValues: [relayUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsStringFromRelayUrlConstMeta =>
      const TaskConstMeta(
        debugName: 'string_from_relay_url',
        argNames: ['relayUrl'],
      );

  @override
  Future<Tag> crateApiUtilsTagFromVec({required List<String> vec}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(vec, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 87,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiUtilsTagFromVecConstMeta,
        argValues: [vec],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsTagFromVecConstMeta =>
      const TaskConstMeta(debugName: 'tag_from_vec', argNames: ['vec']);

  @override
  Future<void> crateApiContactsUpdateContacts({
    required PublicKey pubkey,
    required List<PublicKey> contactPubkeys,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            contactPubkeys,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 88,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiContactsUpdateContactsConstMeta,
        argValues: [pubkey, contactPubkeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiContactsUpdateContactsConstMeta =>
      const TaskConstMeta(
        debugName: 'update_contacts',
        argNames: ['pubkey', 'contactPubkeys'],
      );

  @override
  Future<void> crateApiAccountsUpdateMetadata({
    required MetadataData metadata,
    required PublicKey pubkey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            metadata,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 89,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsUpdateMetadataConstMeta,
        argValues: [metadata, pubkey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsUpdateMetadataConstMeta =>
      const TaskConstMeta(
        debugName: 'update_metadata',
        argNames: ['metadata', 'pubkey'],
      );

  @override
  Future<void> crateApiRelaysUpdateRelays({
    required PublicKey pubkey,
    required RelayType relayType,
    required List<RelayUrl> relays,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
            relayType,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
            relays,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 90,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiRelaysUpdateRelaysConstMeta,
        argValues: [pubkey, relayType, relays],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRelaysUpdateRelaysConstMeta => const TaskConstMeta(
    debugName: 'update_relays',
    argNames: ['pubkey', 'relayType', 'relays'],
  );

  @override
  Future<String> crateApiAccountsUploadProfilePicture({
    required PublicKey pubkey,
    required String serverUrl,
    required String filePath,
    required ImageType imageType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
            pubkey,
            serializer,
          );
          sse_encode_String(serverUrl, serializer);
          sse_encode_String(filePath, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
            imageType,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 91,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError,
        ),
        constMeta: kCrateApiAccountsUploadProfilePictureConstMeta,
        argValues: [pubkey, serverUrl, filePath, imageType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAccountsUploadProfilePictureConstMeta =>
      const TaskConstMeta(
        debugName: 'upload_profile_picture',
        argNames: ['pubkey', 'serverUrl', 'filePath', 'imageType'],
      );

  @override
  Future<String> crateApiUtilsWhitenoiseErrorToString({
    required WhitenoiseError error,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
            error,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 92,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsWhitenoiseErrorToStringConstMeta,
        argValues: [error],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsWhitenoiseErrorToStringConstMeta =>
      const TaskConstMeta(
        debugName: 'whitenoise_error_to_string',
        argNames: ['error'],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Account => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Account => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CdkWallet => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CdkWallet => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ChatMessage => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ChatMessage => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Event => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Event => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Group => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Group => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupId => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupId => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageType => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageType => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MessageWithTokens => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MessageWithTokens => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Metadata => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Metadata => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MetadataData => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MetadataData => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicKey => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicKey => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayType => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayType => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayUrl => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayUrl => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Tag => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Tag => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Welcome => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Welcome => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WhitenoiseConfig => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WhitenoiseConfig => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WhitenoiseError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WhitenoiseError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError;

  @protected
  Account
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CdkWallet
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CdkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageType
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MetadataData
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayType
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayUrl
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MetadataData
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Account
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CdkWallet
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CdkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Group
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageWithTokens
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageWithTokensImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MetadataData
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayUrl
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Welcome
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseError
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<PublicKey, MetadataData?>
  dco_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  Account
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CdkWallet
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CdkWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChatMessage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChatMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Event
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Group
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageType
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageWithTokens
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageWithTokensImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Metadata
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MetadataData
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetadataDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayType
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayUrl
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Tag
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TagImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Welcome
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WelcomeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WhitenoiseError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AccountData dco_decode_account_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AccountData(
      pubkey: dco_decode_String(arr[0]),
      settings: dco_decode_account_settings(arr[1]),
      onboarding: dco_decode_onboarding_state(arr[2]),
      lastSynced: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  AccountSettings dco_decode_account_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AccountSettings(
      darkTheme: dco_decode_bool(arr[0]),
      devMode: dco_decode_bool(arr[1]),
      lockdownMode: dco_decode_bool(arr[2]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Event
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      raw,
    );
  }

  @protected
  MetadataData
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
      raw,
    );
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ChatMessageData dco_decode_chat_message_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return ChatMessageData(
      id: dco_decode_String(arr[0]),
      pubkey: dco_decode_String(arr[1]),
      content: dco_decode_String(arr[2]),
      createdAt: dco_decode_u_64(arr[3]),
      tags: dco_decode_list_String(arr[4]),
      isReply: dco_decode_bool(arr[5]),
      replyToId: dco_decode_opt_String(arr[6]),
      isDeleted: dco_decode_bool(arr[7]),
      contentTokens: dco_decode_list_serializable_token_data(arr[8]),
      reactions: dco_decode_reaction_summary_data(arr[9]),
      kind: dco_decode_u_16(arr[10]),
    );
  }

  @protected
  EmojiReactionData dco_decode_emoji_reaction_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return EmojiReactionData(
      emoji: dco_decode_String(arr[0]),
      count: dco_decode_u_64(arr[1]),
      users: dco_decode_list_String(arr[2]),
    );
  }

  @protected
  GroupData dco_decode_group_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return GroupData(
      mlsGroupId: dco_decode_String(arr[0]),
      nostrGroupId: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      description: dco_decode_String(arr[3]),
      adminPubkeys: dco_decode_list_String(arr[4]),
      lastMessageId: dco_decode_opt_String(arr[5]),
      lastMessageAt: dco_decode_opt_box_autoadd_u_64(arr[6]),
      groupType: dco_decode_group_type(arr[7]),
      epoch: dco_decode_u_64(arr[8]),
      state: dco_decode_group_state(arr[9]),
    );
  }

  @protected
  GroupState dco_decode_group_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupState.values[raw as int];
  }

  @protected
  GroupType dco_decode_group_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupType.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<PublicKey>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey,
        )
        .toList();
  }

  @protected
  List<RelayUrl>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl,
        )
        .toList();
  }

  @protected
  List<Tag>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AccountData> dco_decode_list_account_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_account_data).toList();
  }

  @protected
  List<ChatMessageData> dco_decode_list_chat_message_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_chat_message_data).toList();
  }

  @protected
  List<EmojiReactionData> dco_decode_list_emoji_reaction_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_emoji_reaction_data).toList();
  }

  @protected
  List<GroupData> dco_decode_list_group_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_group_data).toList();
  }

  @protected
  List<MessageWithTokensData> dco_decode_list_message_with_tokens_data(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_message_with_tokens_data)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(PublicKey, MetadataData?)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data,
        )
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<SerializableTokenData> dco_decode_list_serializable_token_data(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_serializable_token_data)
        .toList();
  }

  @protected
  List<UserReactionData> dco_decode_list_user_reaction_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_user_reaction_data).toList();
  }

  @protected
  List<WelcomeData> dco_decode_list_welcome_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_welcome_data).toList();
  }

  @protected
  MessageWithTokensData dco_decode_message_with_tokens_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MessageWithTokensData(
      id: dco_decode_String(arr[0]),
      pubkey: dco_decode_String(arr[1]),
      kind: dco_decode_u_16(arr[2]),
      createdAt: dco_decode_u_64(arr[3]),
      content: dco_decode_opt_String(arr[4]),
      tokens: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  OnboardingState dco_decode_onboarding_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return OnboardingState(
      inboxRelays: dco_decode_bool(arr[0]),
      keyPackageRelays: dco_decode_bool(arr[1]),
      keyPackagePublished: dco_decode_bool(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Event?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
            raw,
          );
  }

  @protected
  MetadataData?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
            raw,
          );
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<Tag>?
  dco_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
            raw,
          );
  }

  @protected
  ReactionSummaryData dco_decode_reaction_summary_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ReactionSummaryData(
      byEmoji: dco_decode_list_emoji_reaction_data(arr[0]),
      userReactions: dco_decode_list_user_reaction_data(arr[1]),
    );
  }

  @protected
  (PublicKey, MetadataData?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
        arr[0],
      ),
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
        arr[1],
      ),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  SerializableTokenData dco_decode_serializable_token_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SerializableTokenData(
      tokenType: dco_decode_String(arr[0]),
      content: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserReactionData dco_decode_user_reaction_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UserReactionData(
      user: dco_decode_String(arr[0]),
      emoji: dco_decode_String(arr[1]),
      createdAt: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WelcomeData dco_decode_welcome_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return WelcomeData(
      id: dco_decode_String(arr[0]),
      mlsGroupId: dco_decode_String(arr[1]),
      nostrGroupId: dco_decode_String(arr[2]),
      groupName: dco_decode_String(arr[3]),
      groupDescription: dco_decode_String(arr[4]),
      groupAdminPubkeys: dco_decode_list_String(arr[5]),
      groupRelays: dco_decode_list_String(arr[6]),
      welcomer: dco_decode_String(arr[7]),
      memberCount: dco_decode_u_32(arr[8]),
      state: dco_decode_welcome_state(arr[9]),
      createdAt: dco_decode_u_64(arr[10]),
    );
  }

  @protected
  WelcomeState dco_decode_welcome_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WelcomeState.values[raw as int];
  }

  @protected
  WhitenoiseConfigData dco_decode_whitenoise_config_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WhitenoiseConfigData(
      dataDir: dco_decode_String(arr[0]),
      logsDir: dco_decode_String(arr[1]),
    );
  }

  @protected
  Account
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CdkWallet
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CdkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Event
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageType
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Metadata
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MetadataData
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayType
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayUrl
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Tag
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MetadataData
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Account
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CdkWallet
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CdkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ChatMessage
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Group
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MessageWithTokens
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageWithTokensImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Metadata
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MetadataData
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayUrl
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Welcome
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseError
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<PublicKey, MetadataData?>
  sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner =
        sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
          deserializer,
        );
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Account
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AccountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CdkWallet
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CdkWalletImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ChatMessage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChatMessageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Event
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Group
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageType
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MessageWithTokens
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageWithTokensImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Metadata
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MetadataData
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MetadataDataImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayType
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayTypeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayUrl
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Tag
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TagImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Welcome
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WelcomeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WhitenoiseError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WhitenoiseErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AccountData sse_decode_account_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_pubkey = sse_decode_String(deserializer);
    final var_settings = sse_decode_account_settings(deserializer);
    final var_onboarding = sse_decode_onboarding_state(deserializer);
    final var_lastSynced = sse_decode_u_64(deserializer);
    return AccountData(
      pubkey: var_pubkey,
      settings: var_settings,
      onboarding: var_onboarding,
      lastSynced: var_lastSynced,
    );
  }

  @protected
  AccountSettings sse_decode_account_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_darkTheme = sse_decode_bool(deserializer);
    final var_devMode = sse_decode_bool(deserializer);
    final var_lockdownMode = sse_decode_bool(deserializer);
    return AccountSettings(
      darkTheme: var_darkTheme,
      devMode: var_devMode,
      lockdownMode: var_lockdownMode,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Event
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      deserializer,
    ));
  }

  @protected
  MetadataData
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
      deserializer,
    ));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ChatMessageData sse_decode_chat_message_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_id = sse_decode_String(deserializer);
    final var_pubkey = sse_decode_String(deserializer);
    final var_content = sse_decode_String(deserializer);
    final var_createdAt = sse_decode_u_64(deserializer);
    final var_tags = sse_decode_list_String(deserializer);
    final var_isReply = sse_decode_bool(deserializer);
    final var_replyToId = sse_decode_opt_String(deserializer);
    final var_isDeleted = sse_decode_bool(deserializer);
    final var_contentTokens = sse_decode_list_serializable_token_data(
      deserializer,
    );
    final var_reactions = sse_decode_reaction_summary_data(deserializer);
    final var_kind = sse_decode_u_16(deserializer);
    return ChatMessageData(
      id: var_id,
      pubkey: var_pubkey,
      content: var_content,
      createdAt: var_createdAt,
      tags: var_tags,
      isReply: var_isReply,
      replyToId: var_replyToId,
      isDeleted: var_isDeleted,
      contentTokens: var_contentTokens,
      reactions: var_reactions,
      kind: var_kind,
    );
  }

  @protected
  EmojiReactionData sse_decode_emoji_reaction_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_emoji = sse_decode_String(deserializer);
    final var_count = sse_decode_u_64(deserializer);
    final var_users = sse_decode_list_String(deserializer);
    return EmojiReactionData(
      emoji: var_emoji,
      count: var_count,
      users: var_users,
    );
  }

  @protected
  GroupData sse_decode_group_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_mlsGroupId = sse_decode_String(deserializer);
    final var_nostrGroupId = sse_decode_String(deserializer);
    final var_name = sse_decode_String(deserializer);
    final var_description = sse_decode_String(deserializer);
    final var_adminPubkeys = sse_decode_list_String(deserializer);
    final var_lastMessageId = sse_decode_opt_String(deserializer);
    final var_lastMessageAt = sse_decode_opt_box_autoadd_u_64(deserializer);
    final var_groupType = sse_decode_group_type(deserializer);
    final var_epoch = sse_decode_u_64(deserializer);
    final var_state = sse_decode_group_state(deserializer);
    return GroupData(
      mlsGroupId: var_mlsGroupId,
      nostrGroupId: var_nostrGroupId,
      name: var_name,
      description: var_description,
      adminPubkeys: var_adminPubkeys,
      lastMessageId: var_lastMessageId,
      lastMessageAt: var_lastMessageAt,
      groupType: var_groupType,
      epoch: var_epoch,
      state: var_state,
    );
  }

  @protected
  GroupState sse_decode_group_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return GroupState.values[inner];
  }

  @protected
  GroupType sse_decode_group_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return GroupType.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<PublicKey>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <PublicKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<RelayUrl>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <RelayUrl>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<Tag>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Tag>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AccountData> sse_decode_list_account_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <AccountData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_account_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<ChatMessageData> sse_decode_list_chat_message_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <ChatMessageData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_chat_message_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<EmojiReactionData> sse_decode_list_emoji_reaction_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <EmojiReactionData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_emoji_reaction_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<GroupData> sse_decode_list_group_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <GroupData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_group_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<MessageWithTokensData> sse_decode_list_message_with_tokens_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <MessageWithTokensData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_message_with_tokens_data(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(PublicKey, MetadataData?)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(PublicKey, MetadataData?)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<SerializableTokenData> sse_decode_list_serializable_token_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <SerializableTokenData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_serializable_token_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<UserReactionData> sse_decode_list_user_reaction_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <UserReactionData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_user_reaction_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<WelcomeData> sse_decode_list_welcome_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <WelcomeData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_welcome_data(deserializer));
    }
    return ans_;
  }

  @protected
  MessageWithTokensData sse_decode_message_with_tokens_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_id = sse_decode_String(deserializer);
    final var_pubkey = sse_decode_String(deserializer);
    final var_kind = sse_decode_u_16(deserializer);
    final var_createdAt = sse_decode_u_64(deserializer);
    final var_content = sse_decode_opt_String(deserializer);
    final var_tokens = sse_decode_list_String(deserializer);
    return MessageWithTokensData(
      id: var_id,
      pubkey: var_pubkey,
      kind: var_kind,
      createdAt: var_createdAt,
      content: var_content,
      tokens: var_tokens,
    );
  }

  @protected
  OnboardingState sse_decode_onboarding_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_inboxRelays = sse_decode_bool(deserializer);
    final var_keyPackageRelays = sse_decode_bool(deserializer);
    final var_keyPackagePublished = sse_decode_bool(deserializer);
    return OnboardingState(
      inboxRelays: var_inboxRelays,
      keyPackageRelays: var_keyPackageRelays,
      keyPackagePublished: var_keyPackagePublished,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Event?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  MetadataData?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Tag>?
  sse_decode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  ReactionSummaryData sse_decode_reaction_summary_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_byEmoji = sse_decode_list_emoji_reaction_data(deserializer);
    final var_userReactions = sse_decode_list_user_reaction_data(deserializer);
    return ReactionSummaryData(
      byEmoji: var_byEmoji,
      userReactions: var_userReactions,
    );
  }

  @protected
  (PublicKey, MetadataData?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
          deserializer,
        );
    final var_field1 =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SerializableTokenData sse_decode_serializable_token_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_tokenType = sse_decode_String(deserializer);
    final var_content = sse_decode_opt_String(deserializer);
    return SerializableTokenData(
      tokenType: var_tokenType,
      content: var_content,
    );
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserReactionData sse_decode_user_reaction_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_user = sse_decode_String(deserializer);
    final var_emoji = sse_decode_String(deserializer);
    final var_createdAt = sse_decode_u_64(deserializer);
    return UserReactionData(
      user: var_user,
      emoji: var_emoji,
      createdAt: var_createdAt,
    );
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WelcomeData sse_decode_welcome_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_id = sse_decode_String(deserializer);
    final var_mlsGroupId = sse_decode_String(deserializer);
    final var_nostrGroupId = sse_decode_String(deserializer);
    final var_groupName = sse_decode_String(deserializer);
    final var_groupDescription = sse_decode_String(deserializer);
    final var_groupAdminPubkeys = sse_decode_list_String(deserializer);
    final var_groupRelays = sse_decode_list_String(deserializer);
    final var_welcomer = sse_decode_String(deserializer);
    final var_memberCount = sse_decode_u_32(deserializer);
    final var_state = sse_decode_welcome_state(deserializer);
    final var_createdAt = sse_decode_u_64(deserializer);
    return WelcomeData(
      id: var_id,
      mlsGroupId: var_mlsGroupId,
      nostrGroupId: var_nostrGroupId,
      groupName: var_groupName,
      groupDescription: var_groupDescription,
      groupAdminPubkeys: var_groupAdminPubkeys,
      groupRelays: var_groupRelays,
      welcomer: var_welcomer,
      memberCount: var_memberCount,
      state: var_state,
      createdAt: var_createdAt,
    );
  }

  @protected
  WelcomeState sse_decode_welcome_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return WelcomeState.values[inner];
  }

  @protected
  WhitenoiseConfigData sse_decode_whitenoise_config_data(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_dataDir = sse_decode_String(deserializer);
    final var_logsDir = sse_decode_String(deserializer);
    return WhitenoiseConfigData(dataDir: var_dataDir, logsDir: var_logsDir);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    Account self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AccountImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    CdkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CdkWalletImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    GroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    ImageType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageTypeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    Metadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataDataImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    RelayType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayTypeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    RelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayUrlImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    Tag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TagImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    WhitenoiseConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    WhitenoiseError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataDataImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    Account self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AccountImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    CdkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CdkWalletImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    ChatMessage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ChatMessageImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    Group self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    GroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    MessageWithTokens self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MessageWithTokensImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    Metadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataDataImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    RelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayUrlImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    Welcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WelcomeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    WhitenoiseConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    WhitenoiseError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseErrorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData_None(
    Map<PublicKey, MetadataData?> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAccount(
    Account self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AccountImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCdkWallet(
    CdkWallet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CdkWalletImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChatMessage(
    ChatMessage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ChatMessageImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroup(
    Group self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupId(
    GroupId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageType(
    ImageType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageTypeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithTokens(
    MessageWithTokens self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MessageWithTokensImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadata(
    Metadata self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MetadataDataImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    PublicKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayType(
    RelayType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayTypeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    RelayUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayUrlImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    Tag self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TagImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWelcome(
    Welcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WelcomeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseConfig(
    WhitenoiseConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWhitenoiseError(
    WhitenoiseError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WhitenoiseErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account_data(AccountData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pubkey, serializer);
    sse_encode_account_settings(self.settings, serializer);
    sse_encode_onboarding_state(self.onboarding, serializer);
    sse_encode_u_64(self.lastSynced, serializer);
  }

  @protected
  void sse_encode_account_settings(
    AccountSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.darkTheme, serializer);
    sse_encode_bool(self.devMode, serializer);
    sse_encode_bool(self.lockdownMode, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_chat_message_data(
    ChatMessageData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.pubkey, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_list_String(self.tags, serializer);
    sse_encode_bool(self.isReply, serializer);
    sse_encode_opt_String(self.replyToId, serializer);
    sse_encode_bool(self.isDeleted, serializer);
    sse_encode_list_serializable_token_data(self.contentTokens, serializer);
    sse_encode_reaction_summary_data(self.reactions, serializer);
    sse_encode_u_16(self.kind, serializer);
  }

  @protected
  void sse_encode_emoji_reaction_data(
    EmojiReactionData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.emoji, serializer);
    sse_encode_u_64(self.count, serializer);
    sse_encode_list_String(self.users, serializer);
  }

  @protected
  void sse_encode_group_data(GroupData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mlsGroupId, serializer);
    sse_encode_String(self.nostrGroupId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_list_String(self.adminPubkeys, serializer);
    sse_encode_opt_String(self.lastMessageId, serializer);
    sse_encode_opt_box_autoadd_u_64(self.lastMessageAt, serializer);
    sse_encode_group_type(self.groupType, serializer);
    sse_encode_u_64(self.epoch, serializer);
    sse_encode_group_state(self.state, serializer);
  }

  @protected
  void sse_encode_group_state(GroupState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_group_type(GroupType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
    List<PublicKey> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
    List<RelayUrl> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayUrl(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    List<Tag> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_account_data(
    List<AccountData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_account_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_chat_message_data(
    List<ChatMessageData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_chat_message_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_emoji_reaction_data(
    List<EmojiReactionData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_emoji_reaction_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_group_data(
    List<GroupData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_group_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_message_with_tokens_data(
    List<MessageWithTokensData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_message_with_tokens_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    List<(PublicKey, MetadataData?)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_serializable_token_data(
    List<SerializableTokenData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_serializable_token_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_user_reaction_data(
    List<UserReactionData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_user_reaction_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_welcome_data(
    List<WelcomeData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_welcome_data(item, serializer);
    }
  }

  @protected
  void sse_encode_message_with_tokens_data(
    MessageWithTokensData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.pubkey, serializer);
    sse_encode_u_16(self.kind, serializer);
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_opt_String(self.content, serializer);
    sse_encode_list_String(self.tokens, serializer);
  }

  @protected
  void sse_encode_onboarding_state(
    OnboardingState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.inboxRelays, serializer);
    sse_encode_bool(self.keyPackageRelays, serializer);
    sse_encode_bool(self.keyPackagePublished, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
    Event? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
    MetadataData? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
    List<Tag>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTag(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_reaction_summary_data(
    ReactionSummaryData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_emoji_reaction_data(self.byEmoji, serializer);
    sse_encode_list_user_reaction_data(self.userReactions, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_public_key_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_metadata_data(
    (PublicKey, MetadataData?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicKey(
      self.$1,
      serializer,
    );
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMetadataData(
      self.$2,
      serializer,
    );
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_serializable_token_data(
    SerializableTokenData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tokenType, serializer);
    sse_encode_opt_String(self.content, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_reaction_data(
    UserReactionData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.user, serializer);
    sse_encode_String(self.emoji, serializer);
    sse_encode_u_64(self.createdAt, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_welcome_data(WelcomeData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.mlsGroupId, serializer);
    sse_encode_String(self.nostrGroupId, serializer);
    sse_encode_String(self.groupName, serializer);
    sse_encode_String(self.groupDescription, serializer);
    sse_encode_list_String(self.groupAdminPubkeys, serializer);
    sse_encode_list_String(self.groupRelays, serializer);
    sse_encode_String(self.welcomer, serializer);
    sse_encode_u_32(self.memberCount, serializer);
    sse_encode_welcome_state(self.state, serializer);
    sse_encode_u_64(self.createdAt, serializer);
  }

  @protected
  void sse_encode_welcome_state(WelcomeState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_whitenoise_config_data(
    WhitenoiseConfigData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dataDir, serializer);
    sse_encode_String(self.logsDir, serializer);
  }
}

@sealed
class AccountImpl extends RustOpaque implements Account {
  // Not to be used by end users
  AccountImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AccountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Account,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Account,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AccountPtr,
  );
}

@sealed
class CdkWalletImpl extends RustOpaque implements CdkWallet {
  // Not to be used by end users
  CdkWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CdkWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CdkWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CdkWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CdkWalletPtr,
  );

  /// Add a mint to the wallet
  Future<void> addMint({required String workDir, required String mintUrl}) =>
      RustLib.instance.api.crateApiWalletCdkWalletAddMint(
        that: this,
        workDir: workDir,
        mintUrl: mintUrl,
      );

  /// Check if a mint quote has been paid
  Future<bool> checkMintQuoteStatus({
    required String workDir,
    required String mintUrl,
    required String quoteId,
  }) => RustLib.instance.api.crateApiWalletCdkWalletCheckMintQuoteStatus(
    that: this,
    workDir: workDir,
    mintUrl: mintUrl,
    quoteId: quoteId,
  );

  /// Get wallet balance for a specific mint
  Future<BigInt> getBalance({
    required String workDir,
    required String mintUrl,
  }) => RustLib.instance.api.crateApiWalletCdkWalletGetBalance(
    that: this,
    workDir: workDir,
    mintUrl: mintUrl,
  );

  /// Mint tokens after a quote has been paid
  Future<String> mintTokens({
    required String workDir,
    required String mintUrl,
    required String quoteId,
  }) => RustLib.instance.api.crateApiWalletCdkWalletMintTokens(
    that: this,
    workDir: workDir,
    mintUrl: mintUrl,
    quoteId: quoteId,
  );

  /// Request a mint quote from a mint
  Future<String> requestMintQuote({
    required String workDir,
    required String mintUrl,
    required BigInt amountSats,
  }) => RustLib.instance.api.crateApiWalletCdkWalletRequestMintQuote(
    that: this,
    workDir: workDir,
    mintUrl: mintUrl,
    amountSats: amountSats,
  );
}

@sealed
class ChatMessageImpl extends RustOpaque implements ChatMessage {
  // Not to be used by end users
  ChatMessageImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChatMessageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChatMessage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChatMessagePtr,
  );
}

@sealed
class EventImpl extends RustOpaque implements Event {
  // Not to be used by end users
  EventImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Event,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Event,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventPtr,
  );
}

@sealed
class GroupIdImpl extends RustOpaque implements GroupId {
  // Not to be used by end users
  GroupIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupIdPtr,
  );
}

@sealed
class GroupImpl extends RustOpaque implements Group {
  // Not to be used by end users
  GroupImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Group,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Group,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupPtr,
  );
}

@sealed
class ImageTypeImpl extends RustOpaque implements ImageType {
  // Not to be used by end users
  ImageTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ImageTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ImageType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ImageType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ImageTypePtr,
  );
}

@sealed
class MessageWithTokensImpl extends RustOpaque implements MessageWithTokens {
  // Not to be used by end users
  MessageWithTokensImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageWithTokensImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessageWithTokens,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageWithTokens,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_MessageWithTokensPtr,
  );
}

@sealed
class MetadataDataImpl extends RustOpaque implements MetadataData {
  // Not to be used by end users
  MetadataDataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MetadataDataImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MetadataData,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MetadataData,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MetadataDataPtr,
  );

  String? get about => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetAbout(that: this);

  String? get banner => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetBanner(that: this);

  String? get displayName => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetDisplayName(that: this);

  String? get lud06 => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetLud06(that: this);

  String? get lud16 => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetLud16(that: this);

  String? get name => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetName(that: this);

  String? get nip05 => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetNip05(that: this);

  String? get picture => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetPicture(that: this);

  String? get website => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorGetWebsite(that: this);

  set about(String? about) => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorSetAbout(that: this, about: about);

  set banner(String? banner) =>
      RustLib.instance.api.crateApiUtilsMetadataDataAutoAccessorSetBanner(
        that: this,
        banner: banner,
      );

  set displayName(String? displayName) =>
      RustLib.instance.api.crateApiUtilsMetadataDataAutoAccessorSetDisplayName(
        that: this,
        displayName: displayName,
      );

  set lud06(String? lud06) => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorSetLud06(that: this, lud06: lud06);

  set lud16(String? lud16) => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorSetLud16(that: this, lud16: lud16);

  set name(String? name) => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorSetName(that: this, name: name);

  set nip05(String? nip05) => RustLib.instance.api
      .crateApiUtilsMetadataDataAutoAccessorSetNip05(that: this, nip05: nip05);

  set picture(String? picture) =>
      RustLib.instance.api.crateApiUtilsMetadataDataAutoAccessorSetPicture(
        that: this,
        picture: picture,
      );

  set website(String? website) =>
      RustLib.instance.api.crateApiUtilsMetadataDataAutoAccessorSetWebsite(
        that: this,
        website: website,
      );

  /// Retrieves the custom metadata fields as a HashMap.
  ///
  /// This method provides access to the private `custom` field, converting from
  /// `BTreeMap` to `HashMap` for Flutter compatibility.
  ///
  /// # Returns
  /// A HashMap containing all custom key-value pairs
  ///
  /// # Example
  /// ```rust
  /// let metadata = MetadataData { /* ... */ };
  /// let custom_fields = metadata.get_custom();
  /// println!("Custom fields: {:?}", custom_fields);
  /// ```
  Future<Map<String, String>> getCustom() =>
      RustLib.instance.api.crateApiUtilsMetadataDataGetCustom(that: this);

  /// Sets the custom metadata fields from a HashMap.
  ///
  /// This method allows updating the private `custom` field, converting from
  /// `HashMap` to `BTreeMap` internally for consistent ordering.
  ///
  /// # Parameters
  /// * `custom_map` - A HashMap containing custom key-value pairs to store
  ///
  /// # Example
  /// ```rust
  /// let mut metadata = MetadataData { /* ... */ };
  /// let mut custom = HashMap::new();
  /// custom.insert("theme".to_string(), "dark".to_string());
  /// metadata.set_custom(custom);
  /// ```
  Future<void> setCustom({required Map<String, String> customMap}) => RustLib
      .instance
      .api
      .crateApiUtilsMetadataDataSetCustom(that: this, customMap: customMap);
}

@sealed
class MetadataImpl extends RustOpaque implements Metadata {
  // Not to be used by end users
  MetadataImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MetadataImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Metadata,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Metadata,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MetadataPtr,
  );
}

@sealed
class PublicKeyImpl extends RustOpaque implements PublicKey {
  // Not to be used by end users
  PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PublicKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicKeyPtr,
  );
}

@sealed
class RelayTypeImpl extends RustOpaque implements RelayType {
  // Not to be used by end users
  RelayTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayTypePtr,
  );
}

@sealed
class RelayUrlImpl extends RustOpaque implements RelayUrl {
  // Not to be used by end users
  RelayUrlImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayUrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayUrl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayUrl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayUrlPtr,
  );
}

@sealed
class TagImpl extends RustOpaque implements Tag {
  // Not to be used by end users
  TagImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TagImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Tag,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Tag,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TagPtr,
  );
}

@sealed
class WelcomeImpl extends RustOpaque implements Welcome {
  // Not to be used by end users
  WelcomeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WelcomeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Welcome,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Welcome,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WelcomePtr,
  );
}

@sealed
class WhitenoiseConfigImpl extends RustOpaque implements WhitenoiseConfig {
  // Not to be used by end users
  WhitenoiseConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WhitenoiseConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WhitenoiseConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WhitenoiseConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_WhitenoiseConfigPtr,
  );
}

@sealed
class WhitenoiseErrorImpl extends RustOpaque implements WhitenoiseError {
  // Not to be used by end users
  WhitenoiseErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WhitenoiseErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WhitenoiseError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WhitenoiseError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WhitenoiseErrorPtr,
  );
}
